0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'install', 'java' ]
2 info using npm@1.3.14
3 info using node@v0.10.22
4 warn package.json eventemitter2@0.4.11 'repositories' (plural) Not supported.
4 warn package.json Please pick one as the 'repository' field
5 verbose readDependencies using package.json deps
6 verbose cache add [ 'java', null ]
7 verbose cache add name=undefined spec="java" args=["java",null]
8 verbose parsed url { protocol: null,
8 verbose parsed url   slashes: null,
8 verbose parsed url   auth: null,
8 verbose parsed url   host: null,
8 verbose parsed url   port: null,
8 verbose parsed url   hostname: null,
8 verbose parsed url   hash: null,
8 verbose parsed url   search: null,
8 verbose parsed url   query: null,
8 verbose parsed url   pathname: 'java',
8 verbose parsed url   path: 'java',
8 verbose parsed url   href: 'java' }
9 silly lockFile 23524be9-java java
10 verbose lock java /home/jack/.npm/23524be9-java.lock
11 silly lockFile 23524be9-java java
12 silly lockFile 23524be9-java java
13 verbose addNamed [ 'java', '' ]
14 verbose addNamed [ null, '*' ]
15 silly lockFile 0f6a664b-java java@
16 verbose lock java@ /home/jack/.npm/0f6a664b-java.lock
17 silly addNameRange { name: 'java', range: '*', hasData: false }
18 verbose url raw java
19 verbose url resolving [ 'https://registry.npmjs.org/', './java' ]
20 verbose url resolved https://registry.npmjs.org/java
21 info trying registry request attempt 1 at 10:43:09
22 verbose etag "4UVDBWC5E497HYQRB7Q9MZ1LF"
23 http GET https://registry.npmjs.org/java
24 http 304 https://registry.npmjs.org/java
25 silly registry.get cb [ 304,
25 silly registry.get   { server: 'CouchDB/1.5.0 (Erlang OTP/R15B03)',
25 silly registry.get     etag: '"4UVDBWC5E497HYQRB7Q9MZ1LF"',
25 silly registry.get     date: 'Tue, 26 Nov 2013 15:43:13 GMT',
25 silly registry.get     'content-length': '0' } ]
26 verbose etag java from cache
27 silly addNameRange number 2 { name: 'java', range: '*', hasData: true }
28 silly addNameRange versions [ 'java',
28 silly addNameRange   [ '0.0.1',
28 silly addNameRange     '0.0.2',
28 silly addNameRange     '0.0.3',
28 silly addNameRange     '0.0.4',
28 silly addNameRange     '0.0.5',
28 silly addNameRange     '0.0.6',
28 silly addNameRange     '0.1.0',
28 silly addNameRange     '0.1.1',
28 silly addNameRange     '0.1.2',
28 silly addNameRange     '0.1.3',
28 silly addNameRange     '0.2.0',
28 silly addNameRange     '0.2.1',
28 silly addNameRange     '0.2.2',
28 silly addNameRange     '0.2.3',
28 silly addNameRange     '0.2.4',
28 silly addNameRange     '0.2.5',
28 silly addNameRange     '0.2.6',
28 silly addNameRange     '0.2.7',
28 silly addNameRange     '0.2.8',
28 silly addNameRange     '0.2.9' ] ]
29 verbose addNamed [ 'java', '0.2.9' ]
30 verbose addNamed [ '0.2.9', '0.2.9' ]
31 silly lockFile 1e1dbba0-java-0-2-9 java@0.2.9
32 verbose lock java@0.2.9 /home/jack/.npm/1e1dbba0-java-0-2-9.lock
33 silly lockFile 1e1dbba0-java-0-2-9 java@0.2.9
34 silly lockFile 1e1dbba0-java-0-2-9 java@0.2.9
35 silly lockFile 0f6a664b-java java@
36 silly lockFile 0f6a664b-java java@
37 silly resolved [ { name: 'java',
37 silly resolved     description: 'Bridge API to connect with existing Java APIs.',
37 silly resolved     author: { name: 'Joe Ferner', email: 'joe.ferner@nearinfinity.com' },
37 silly resolved     keywords: [ 'java', 'jvm', 'bridge' ],
37 silly resolved     version: '0.2.9',
37 silly resolved     engines: { node: '>=0.6.0' },
37 silly resolved     maintainers: [ [Object], [Object] ],
37 silly resolved     bugs: { url: 'https://github.com/nearinfinity/node-java/issues' },
37 silly resolved     license: 'MIT',
37 silly resolved     repository:
37 silly resolved      { type: 'git',
37 silly resolved        url: 'https://github.com/nearinfinity/node-java.git' },
37 silly resolved     dependencies: {},
37 silly resolved     devDependencies: { nodeunit: '~0.6.4', memwatch: '~0.2.0', async: '~0.1.22' },
37 silly resolved     scripts: { test: 'nodeunit test', install: 'node-gyp rebuild' },
37 silly resolved     main: './index.js',
37 silly resolved     gypfile: true,
37 silly resolved     readme: '# java\n\nBridge API to connect with existing Java APIs.\n\n[Google Groups Discussion Forum](https://groups.google.com/forum/#!forum/node-java)\n\n## Installation Linux/Windows\n\n```bash\n$ export JAVA_HOME=/usr/local/share/jdk1.6.0_30\n$ npm install java\n```\n\nNotes:\n* node-gyp requires python 2.x not python 3.x. See https://github.com/TooTallNate/node-gyp/issues/155 for more details.\n* If you see an error such as "No rule to make target \'/opt/jdk1.7.0_09/jre/lib/amd64/server/libjvm.so\', needed by \'build/depsVerified\'.  Stop."\n      this means that your JAVA_HOME is not set correctly and you need to verify the location of libjvm.so or jvm.lib.\n* If you see an error such as "Error: The specified module could not be found. \n      xxxxxx\\node_modules\\java\\build\\Release\\nodejavabridge_bindings.node".\n      Ensure the directory where jvm.dll exists is in your PATH. (e.g. C:\\Program Files (x86)\\Java\\jdk1.6.0_18\\jre\\bin\\client).\n      This path cannot have quotes.\n\n\n## Installation Mac\n\n```bash\n$ npm install java\n```\n\n_Mavericks Users: If you are having problems finding \'jni.h\' please see [Issue #86](https://github.com/nearinfinity/node-java/issues/86)_\n\n## Installation ARM (Raspberry Pi)\n\n```bash\nGYP_DEFINES="armv7=0" CCFLAGS=\'-march=armv6\' CXXFLAGS=\'-march=armv6\' npm install java\n```\n\n## Manual compile (Using node-gyp)\n\n```bash\n./compile-java-code.sh\nnode-gyp configure build\nnpm test\n```\n\n_NOTE: You will need node-gyp installed using "npm install -g node-gyp"_\n\n## Quick Examples\n\n```javascript\nvar java = require("java");\njava.classpath.push("commons-lang3-3.1.jar");\njava.classpath.push("commons-io.jar");\n\nvar list = java.newInstanceSync("java.util.ArrayList");\n\njava.newInstance("java.util.ArrayList", function(err, list) {\n  list.addSync("item1");\n  list.addSync("item2");\n});\n\nvar ArrayList = java.import(\'java.util.ArrayList\');\nvar list = new ArrayList();\nlist.addSync(\'item1\');\n```\n\n### Create a char array\n\n```javascript\nvar charArray = java.newArray("char", "hello world\\n".split(\'\'));\n```\n\n### Create a byte array\n\n```javascript\nvar byteArray = java.newArray(\n  "byte",\n  "hello world\\n"\n    .split(\'\')\n    .map(function(c) { return java.newByte(str.charCodeAt(c)); });\n```\n\n### Using java.lang.Long and long\n\nJavaScript only supports 32-bit integers. Because of this java longs must be treated specially.\nWhen getting a long result the value may be truncated. If you need the original value there is\na property off of the result called "longValue" which contains the un-truncated value as a string.\nIf you are calling a method that takes a long you must create it using [java.newInstance](#javaNewInstance).\n\n```javascript\nvar javaLong = java.newInstanceSync("java.lang.Long", 5);\nconsole.log(\'Possibly truncated long value: \' + javaLong);\nconsole.log(\'Original long value (as a string): \' + javaLong.longValue);\njava.callStaticMethodSync("Test", "staticMethodThatTakesALong", javaLong);\n```\n\n### Exceptions\n\nExceptions from calling methods either caught using JavaScript try/catch block or passed\nto a callback as the first parameter may have a property named "cause" which has a reference\nto the Java Exception object which caused the error.\n\n```javascript\ntry {\n  java.methodThatThrowsExceptionSync();\n} catch(ex) {\n  console.log(ex.cause.getMessageSync());\n}\n```\n\n# Release Notes\n\n### v0.2.0\n\n* java.lang.Long and long primitives are handled better. See\n  \\([Issue #37](https://github.com/nearinfinity/node-java/issues/37)\\) and\n  \\([Issue #40](https://github.com/nearinfinity/node-java/issues/40)\\).\n\n# Index\n\n## java\n * [classpath](#javaClasspath)\n * [options](#javaOptions)\n * [import](#javaImport)\n * [newInstance](#javaNewInstance)\n * [instanceOf](#javaInstanceOf)\n * [callStaticMethod](#javaCallStaticMethod)\n * [getStaticFieldValue](#javaGetStaticFieldValue)\n * [setStaticFieldValue](#javaSetStaticFieldValue)\n * [newArray](#javaNewArray)\n * [newByte](#javaNewByte)\n * [newShort](#javaNewShort)\n * [newLong](#javaNewLong)\n * [newChar](#javaNewChar)\n * [newDouble](#javaNewDouble)\n * [newFloat](#javaNewFloat)\n * [newProxy](#javaNewProxy)\n\n## java objects\n * [Call Method](#javaObjectCallMethod)\n * [Get/Set Field](#javaObjectGetSetField)\n\n# API Documentation\n\n<a name="java"/>\n## java\n\n<a name="javaClasspath" />\n**java.classpath**\n\nArray of paths or jars to pass to the creation of the JVM.\n\nAll items must be added to the classpath before calling any other node-java methods.\n\n__Example__\n\n    java.classpath.push(\'commons.io.jar\');\n\n<a name="javaOptions" />\n**java.options**\n\nArray of options to pass to the creation of the JVM.\n\nAll items must be added to the options before calling any other node-java methods.\n\n__Example__\n\n    java.options.push(\'-Djava.awt.headless=true\');\n    java.options.push(\'-Xmx1024m\');\n\n<a name="javaImport" />\n**java.import(className)**\n\nLoads the class given by className such that it acts and feels like a javascript object.\n\n__Arguments__\n\n * className - The name of the class to create. For subclasses seperate using a \'$\' (eg. com.nearinfinty.MyClass$SubClass)\n\n__Example__\n\n    var Test = java.import(\'Test\');\n    Test.someStaticMethodSync(5);\n    console.log(Test.someStaticField);\n\n    var test = new Test();\n    list.instanceMethodSync(\'item1\');\n\n<a name="javaNewInstance" />\n**java.newInstance(className, [args...], callback)**\n\n**java.newInstanceSync(className, [args...]) : result**\n\nCreates an instance of the specified class. If you are using the sync method an exception will be throw if an error occures,\notherwise it will be the first argument in the callback.\n\n__Arguments__\n\n * className - The name of the class to create. For subclasses seperate using a \'$\' (eg. com.nearinfinty.MyClass$SubClass)\n * callback(err, item) - Callback to be called when the class is created.\n\n__Example__\n\n    var list = java.newInstanceSync("java.util.ArrayList");\n\n    java.newInstance("java.util.ArrayList", function(err, list) {\n      if(err) { console.error(err); return; }\n      // new list\n    });\n\n<a name="javaInstanceOf" />\n**java.instanceOf(javaObject, className)**\n\nDetermines of a javaObject is an instance of a class.\n\n__Arguments__\n\n * javaObject - Instance of a java object returned from a method or from newInstance.\n * className - A string class name.\n\n__Example__\n\n    var obj = java.newInstanceSync("my.package.SubClass");\n\n    if(java.instanceOf(obj, "my.package.SuperClass")) {\n      console.log("obj is an instance of SuperClass");\n    }\n\n<a name="javaCallStaticMethod" />\n**java.callStaticMethod(className, methodName, [args...], callback)**\n\n**java.callStaticMethodSync(className, methodName, [args...]) : result**\n\nCalls a static method on the specified class. If you are using the sync method an exception will be throw if an error occures,\notherwise it will be the first argument in the callback.\n\n__Arguments__\n\n * className - The name of the class to call the method on. For subclasses seperate using a \'$\' (eg. com.nearinfinty.MyClass$SubClass)\n * methodName - The name of the method to call.\n * callback(err, item) - Callback to be called when the class is created.\n\n__Example__\n\n    var result = java.callStaticMethodSync("com.nearinfinty.MyClass", "doSomething", 42, "test");\n\n    java.callStaticMethod("com.nearinfinty.MyClass", "doSomething", 42, "test", function(err, results) {\n      if(err) { console.error(err); return; }\n      // results from doSomething\n    });\n\n<a name="javaGetStaticFieldValue" />\n**java.getStaticFieldValue(className, fieldName)**\n\nGets a static field value from the specified class.\n\n__Arguments__\n\n * className - The name of the class to get the value from. For subclasses seperate using a \'$\' (eg. com.nearinfinty.MyClass$SubClass)\n * fieldName - The name of the field to get the value from.\n\n__Example__\n\n    var data = java.getStaticFieldValue("com.nearinfinty.MyClass", "data");\n\n<a name="javaSetStaticFieldValue" />\n**java.setStaticFieldValue(className, fieldName, newValue)**\n\nSets a static field value on the specified class.\n\n__Arguments__\n\n * className - The name of the class to set the value on. For subclasses seperate using a \'$\' (eg. com.nearinfinty.MyClass$SubClass)\n * fieldName - The name of the field to set the value on.\n * newValue - The new value to assign to the field.\n\n__Example__\n\n    java.getStaticFieldValue("com.nearinfinty.MyClass", "data", "Hello World");\n\n<a name="javaNewArray" />\n**java.newArray(className, values[])**\n\nCreates a new java array of type class.\n\n__Arguments__\n\n * className - The name of the type of array elements. For subclasses seperate using a \'$\' (eg. com.nearinfinty.MyClass$SubClass)\n * values - A javascript array of values to assign to the java array.\n\n__Example__\n\n    var newArray = java.newArray("java.lang.String", ["item1", "item2", "item3"]);\n\n<a name="javaNewByte" />\n**java.newByte(val)**\n\nCreates a new java byte. This is needed because javascript does not have the concept of a byte.\n\n__Arguments__\n\n * val - The value of the java byte.\n\n__Example__\n\n    var b = java.newByte(12);\n\n<a name="javaNewShort" />\n**java.newShort(val)**\n\nCreates a new java short. This is needed because javascript does not have the concept of a short.\n\n__Arguments__\n\n * val - The value of the java short.\n\n__Example__\n\n    var s = java.newShort(12);\n\n<a name="javaNewLong" />\n**java.newLong(val)**\n\nCreates a new java long. This is needed because javascript does not have the concept of a long.\n\n__Arguments__\n\n * val - The value of the java long.\n\n__Example__\n\n    var s = java.newLong(12);\n\n<a name="javaNewChar" />\n**java.newChar(val)**\n\nCreates a new java char. This is needed because javascript does not have the concept of a char.\n\n__Arguments__\n\n * val - The value of the java char.\n\n__Example__\n\n    var ch = java.newChar(\'a\');\n\n<a name="javaNewDouble" />\n**java.newDouble(val)**\n\nCreates a new java double. This is needed to force javascript\'s number to a double to call some methods.\n\n__Arguments__\n\n * val - The value of the java double.\n\n__Example__\n\n    var d = java.newDouble(3.14);\n\n<a name="javaNewFloat" />\n**java.newFloat(val)**\n\nCreates a new java float. This is needed to force javascript\'s number to a float to call some methods.\n\n__Arguments__\n\n * val - The value of the java float.\n\n__Example__\n\n    var f = java.newFloat(3.14);\n\n<a name="javaNewProxy" />\n**java.newProxy(interfaceName, functions)**\n\nCreates a new java Proxy for the given interface. Functions passed in will run on the v8 main thread and not a new thread.\n\nThe returned object has two methods ref() and unref() which you can use to maintain references to prevent premature\ngarbage collection. You must call these methods to ensure the proxy stays around.\n\n__Arguments__\n\n * interfaceName - The name of the interface to proxy. For subclasses seperate using a \'$\' (eg. com.nearinfinty.MyClass$SubClass)\n * functions - A hash of functions matching the function in the interface.\n\n__Example__\n\n    var myProxy = java.newProxy(\'java.lang.Runnable\', {\n      run: function () {\n        // This is actually run on the v8 thread and not the new java thread\n        console.log("hello from thread");\n      }\n    });\n\n    var thread = java.newInstanceSync("java.lang.Thread", myProxy);\n    thread.start();\n\n<a name="javaObject"/>\n## java object\n\n<a name="javaObjectCallMethod" />\n**obj._methodName_([args...], callback)**\n\n**obj._methodNameSync_([args...]) : result**\n\nOnce you have a java object either by creating a new instance or as a result of a method call you can then call methods on that object.\nAll public, non-static methods are exposed in synchronous and asynchronous flavors.\n\n__Arguments__\n\n * args - The arguments to pass to the method.\n * callback(err, item) - Callback to be called when the method has completed.\n\n__Example__\n\n    var list = java.newInstanceSync("java.util.ArrayList");\n    list.addSync("item1");\n    list.add("item2", function(err, result) {\n      if(err) { console.error(err); return; }\n    });\n\n<a name="javaObjectGetSetField" />\n**obj._fieldName_ = val**\n\n**val = obj._fieldName_**\n\nOnce you have a java object either by creating a new instance or as a result of a method call you can get instance\nfield values.\n\n__Example__\n\n    var list = java.newInstanceSync("com.nearinfinty.MyClass");\n    list.data = "test";\n    var data = list.data;\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n"Software"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n',
37 silly resolved     readmeFilename: 'README.md',
37 silly resolved     homepage: 'https://github.com/nearinfinity/node-java',
37 silly resolved     _id: 'java@0.2.9',
37 silly resolved     _from: 'java@' } ]
38 info install java@0.2.9 into /home/jack/workspace/WeatherAngle
39 info installOne java@0.2.9
40 info /home/jack/workspace/WeatherAngle/node_modules/java unbuild
41 verbose tar unpack /home/jack/.npm/java/0.2.9/package.tgz
42 silly lockFile 6ead8eba-e-WeatherAngle-node-modules-java tar:///home/jack/workspace/WeatherAngle/node_modules/java
43 verbose lock tar:///home/jack/workspace/WeatherAngle/node_modules/java /home/jack/.npm/6ead8eba-e-WeatherAngle-node-modules-java.lock
44 silly lockFile e46deab9--jack-npm-java-0-2-9-package-tgz tar:///home/jack/.npm/java/0.2.9/package.tgz
45 verbose lock tar:///home/jack/.npm/java/0.2.9/package.tgz /home/jack/.npm/e46deab9--jack-npm-java-0-2-9-package-tgz.lock
46 silly gunzTarPerm modes [ '755', '644' ]
47 silly gunzTarPerm extractEntry package.json
48 silly gunzTarPerm extractEntry .npmignore
49 silly gunzTarPerm extractEntry README.md
50 silly gunzTarPerm extractEntry LICENSE
51 silly gunzTarPerm extractEntry index.js
52 silly gunzTarPerm extractEntry mnm.js
53 silly gunzTarPerm extractEntry testHelpers.js
54 silly gunzTarPerm extractEntry touch.py
55 silly gunzTarPerm extractEntry jarjar.rule
56 silly gunzTarPerm extractEntry binding.gyp
57 silly gunzTarPerm extractEntry commons-lang3-node-java.jar
58 silly gunzTarPerm extractEntry compile-java-code.sh
59 silly gunzTarPerm extractEntry projectFilesBackup/.idea/libraries/sass_stdlib.xml
60 silly gunzTarPerm extractEntry projectFilesBackup1/.idea/libraries/sass_stdlib.xml
61 silly gunzTarPerm extractEntry src/methodCallBaton.cpp
62 silly gunzTarPerm extractEntry src/java.cpp
63 silly gunzTarPerm extractEntry src/javaObject.cpp
64 silly gunzTarPerm extractEntry src/javaObject.h
65 silly gunzTarPerm extractEntry src/javaScope.cpp
66 silly gunzTarPerm extractEntry src/javaScope.h
67 silly gunzTarPerm extractEntry src/java.h
68 silly gunzTarPerm extractEntry src/methodCallBaton.h
69 silly gunzTarPerm extractEntry src/nodeJavaBridge.cpp
70 silly gunzTarPerm extractEntry src/node_NodeDynamicProxyClass.h
71 silly gunzTarPerm extractEntry src/utils.cpp
72 silly gunzTarPerm extractEntry src/utils.h
73 silly gunzTarPerm extractEntry src-java/node/NodeDynamicProxyClass.class
74 silly gunzTarPerm extractEntry src-java/node/NodeDynamicProxyClass.java
75 silly gunzTarPerm extractEntry test/utils-types-test.js
76 silly gunzTarPerm extractEntry test/simple-test.js
77 silly gunzTarPerm extractEntry test/javaObject-test.js
78 silly gunzTarPerm extractEntry test/java-staticField-test.js
79 silly gunzTarPerm extractEntry test/java-newInstance-test.js
80 silly gunzTarPerm extractEntry test/java-callStaticMethod-test.js
81 silly gunzTarPerm extractEntry test/instanceof-test.js
82 silly gunzTarPerm extractEntry test/importClass-test.js
83 silly gunzTarPerm extractEntry test/dynamicProxy-test.js
84 silly gunzTarPerm extractEntry test/awt-test.js
85 silly gunzTarPerm extractEntry test/Test$SuperClass.class
86 silly gunzTarPerm extractEntry test/TestExceptions.java
87 silly gunzTarPerm extractEntry test/commons-lang3-3.1.jar
88 silly gunzTarPerm extractEntry test/TestExceptions.class
89 silly gunzTarPerm extractEntry test/Test.java
90 silly gunzTarPerm extractEntry test/Test.class
91 silly gunzTarPerm extractEntry test/RunInterface$Interface1Arg.class
92 silly gunzTarPerm extractEntry test/Test$SubClass.class
93 silly gunzTarPerm extractEntry test/RunInterface.java
94 silly gunzTarPerm extractEntry test/RunInterface.class
95 silly gunzTarPerm extractEntry test/nodejs.png
96 silly gunzTarPerm extractEntry test/RunInterface$InterfaceWithReturn.class
97 silly gunzTarPerm extractEntry test/RunInterface$Interface0Arg.class
98 silly gunzTarPerm extractEntry examples/lucene/example.js
99 silly gunzTarPerm extractEntry examples/lucene/lucene-core-3.5.0.jar
100 silly gunzTarPerm extractEntry examples/mixJavaAndNode/runMyClass.js
101 silly gunzTarPerm extractEntry examples/mixJavaAndNode/src/com/nearinfinity/nodeJava/MyClass.class
102 silly gunzTarPerm extractEntry examples/mixJavaAndNode/src/com/nearinfinity/nodeJava/MyClass.java
103 silly gunzTarPerm extractEntry lib/nodeJavaBridge.js
104 silly lockFile 6ead8eba-e-WeatherAngle-node-modules-java tar:///home/jack/workspace/WeatherAngle/node_modules/java
105 silly lockFile 6ead8eba-e-WeatherAngle-node-modules-java tar:///home/jack/workspace/WeatherAngle/node_modules/java
106 silly lockFile e46deab9--jack-npm-java-0-2-9-package-tgz tar:///home/jack/.npm/java/0.2.9/package.tgz
107 silly lockFile e46deab9--jack-npm-java-0-2-9-package-tgz tar:///home/jack/.npm/java/0.2.9/package.tgz
108 info preinstall java@0.2.9
109 verbose readDependencies using package.json deps
110 verbose readDependencies using package.json deps
111 silly resolved []
112 verbose about to build /home/jack/workspace/WeatherAngle/node_modules/java
113 info build /home/jack/workspace/WeatherAngle/node_modules/java
114 verbose linkStuff [ false,
114 verbose linkStuff   false,
114 verbose linkStuff   false,
114 verbose linkStuff   '/home/jack/workspace/WeatherAngle/node_modules' ]
115 info linkStuff java@0.2.9
116 verbose linkBins java@0.2.9
117 verbose linkMans java@0.2.9
118 verbose rebuildBundles java@0.2.9
119 info install java@0.2.9
120 verbose unsafe-perm in lifecycle true
121 info java@0.2.9 Failed to exec install script
122 info /home/jack/workspace/WeatherAngle/node_modules/java unbuild
123 info preuninstall java@0.2.9
124 info uninstall java@0.2.9
125 verbose true,/home/jack/workspace/WeatherAngle/node_modules,/home/jack/workspace/WeatherAngle/node_modules unbuild java@0.2.9
126 info postuninstall java@0.2.9
127 error java@0.2.9 install: `node-gyp rebuild`
127 error Exit status 1
128 error Failed at the java@0.2.9 install script.
128 error This is most likely a problem with the java package,
128 error not with npm itself.
128 error Tell the author that this fails on your system:
128 error     node-gyp rebuild
128 error You can get their info via:
128 error     npm owner ls java
128 error There is likely additional logging output above.
129 error System Linux 3.11.0-13-generic
130 error command "/usr/local/bin/node" "/usr/local/bin/npm" "install" "java"
131 error cwd /home/jack/workspace/WeatherAngle
132 error node -v v0.10.22
133 error npm -v 1.3.14
134 error code ELIFECYCLE
135 verbose exit [ 1, true ]
